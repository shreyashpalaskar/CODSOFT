#include <iostream>
#include <vector>

// Function declarations
void initializeBoard(std::vector<std::vector<char>> &board);
void displayBoard(const std::vector<std::vector<char>> &board);
bool makeMove(std::vector<std::vector<char>> &board, char player, int row, int col);
bool checkForWin(const std::vector<std::vector<char>> &board, char player);
bool checkForDraw(const std::vector<std::vector<char>> &board);
bool playAgain();

int main() {
    std::vector<std::vector<char>> board(3, std::vector<char>(3, ' '));
    char currentPlayer = 'X';

    do {
        initializeBoard(board);
        displayBoard(board);

        while (true) {
            int row, col;
            std::cout << "Player " << currentPlayer << ", enter your move (row and column): ";
            std::cin >> row >> col;

            if (row >= 1 && row <= 3 && col >= 1 && col <= 3 && board[row - 1][col - 1] == ' ') {
                if (makeMove(board, currentPlayer, row - 1, col - 1)) {
                    displayBoard(board);
                    if (checkForWin(board, currentPlayer)) {
                        std::cout << "Player " << currentPlayer << " wins!" << std::endl;
                        break;
                    } else if (checkForDraw(board)) {
                        std::cout << "It's a draw!" << std::endl;
                        break;
                    }
                    currentPlayer = (currentPlayer == 'X') ? 'O' : 'X'; // Switch players
                } else {
                    std::cout << "Invalid move! The cell is already occupied. Try again." << std::endl;
                }
            } else {
                std::cout << "Invalid move! Row and column must be between 1 and 3. Try again." << std::endl;
            }
        }
    } while (playAgain());

    return 0;
}

void initializeBoard(std::vector<std::vector<char>> &board) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            board[i][j] = ' ';
        }
    }
}

void displayBoard(const std::vector<std::vector<char>> &board) {
    std::cout << "  1 2 3" << std::endl;
    for (int i = 0; i < 3; ++i) {
        std::cout << i + 1 << " ";
        for (int j = 0; j < 3; ++j) {
            std::cout << board[i][j] << ' ';
        }
        std::cout << std::endl;
    }
}

bool makeMove(std::vector<std::vector<char>> &board, char player, int row, int col) {
    if (board[row][col] == ' ') {
        board[row][col] = player;
        return true;
    }
    return false;
}

bool checkForWin(const std::vector<std::vector<char>> &board, char player) {
    // Check rows, columns, and diagonals for a win
    for (int i = 0; i < 3; ++i) {
        if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) ||
            (board[0][i] == player && board[1][i] == player && board[2][i] == player)) {
            return true;
        }
    }
    if ((board[0][0] == player && board[1][1] == player && board[2][2] == player) ||
        (board[0][2] == player && board[1][1] == player && board[2][0] == player)) {
        return true;
    }
    return false;
}

bool checkForDraw(const std::vector<std::vector<char>> &board) {
    // Check if the board is full (no empty spaces)
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[i][j] == ' ') {
                return false;
            }
        }
    }
    return true;
}

bool playAgain() {
    char choice;
    std::cout << "Do you want to play again? (y/n): ";
    std::cin >> choice;
    return (choice == 'y' || choice == 'Y');
}
